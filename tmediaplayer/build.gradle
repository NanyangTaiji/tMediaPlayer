plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

def GROUP_ID = "com.tans.tmediaplayer"
def ARTIFACT_ID = 'tmediaplayer'
def VERSION_NAME = "1.0.0-alpha01"
def GITHUB_PATH = "https://maven.pkg.github.com/Tans5/tMediaPlayer"

android {
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags ""
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ["src/main/cpp"]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.18.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    ndkVersion '24.0.8215888'
    namespace 'com.tans.tmediaplayer'
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.convention('sources')
    archiveClassifier.set('sources')
    from(android.sourceSets.main.java.srcDirs)
}

publishing {
    repositories {
        maven {
            name = "release"
            credentials {
                username "Tans5"
                password ""
            }
            url "$GITHUB_PATH" // 仓库地址
        }
    }
    publications {
        github(MavenPublication) {
            groupId(GROUP_ID)
            artifactId(ARTIFACT_ID)
            version(VERSION_NAME)
            // 必须有这个 否则不会上传AAR包
            afterEvaluate {
                artifact(tasks.getByName("bundleReleaseAar"))
            }
            // 上传source，这样使用方可以看到方法注释 & 具体代码
            artifact(androidSourcesJar)
            // pom文件中声明依赖，从而传递到使用方（不加这个会有so包缺失，或者NoClass异常）
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println it.toString()
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }
        }
    }
}